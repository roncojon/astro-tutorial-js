---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { serverApp } from "../firebase/server";
import { getAuth } from "firebase-admin/auth";

export const prerender = false;

const auth = getAuth(serverApp);

const redirectTo = Astro.url.searchParams.get('redirect') || '/dashboard';

/* Check if the user is authenticated */
if (Astro.cookies.has("__session")) {
  const sessionCookie = Astro.cookies.get("__session")?.value;
  const decodedCookie = await auth.verifySessionCookie(sessionCookie ?? "");

  if (decodedCookie) {
    return Astro.redirect(redirectTo);
  }
}
---

<BaseLayout title="Sign in">
  <h1>Sign in</h1>
  <p>New here? <a href="/register">Create an account</a></p>

  <!-- Form for signing in -->
  <form method="post" action="/api/auth/signin">
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" />
    <button type="submit">Login</button>
  </form>
</BaseLayout>

<script>
  // Import necessary Firebase Auth functions and the Firebase client app
  import {
    getAuth,
    inMemoryPersistence,
    signInWithEmailAndPassword,
  } from "firebase/auth";
  import { clientApp } from "../firebase/client";

  // Initialize Firebase Auth
  const auth = getAuth(clientApp);

  // Set the persistence mode to in-memory, which prevents the browser from storing session data
  auth.setPersistence(inMemoryPersistence);

  // Get the form element
  const form = document.querySelector("form") as HTMLFormElement;

  // Get the actual URL
  const actualUrl = new URL(window.location.href);

  // Add an event listener for the form submission
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    // Get the form data
    const formData = new FormData(form);
    const email = formData.get("email")?.toString();
    const password = formData.get("password")?.toString();

    // If the email or password is missing, return early
    if (!email || !password) {
      return;
    }

    // Sign in with email and password
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );

    // Extract the query parameters
    const params = new URLSearchParams(actualUrl.search);
    const redirect = params.get("redirect") || "/dashboard";

    console.log("actualUrlQueryParams", params);
    console.log("redirect", redirect);

    // Get the ID token
    const idToken = await userCredential.user.getIdToken();

    // Send a request to the sign-in API with the redirect parameter as a query string
    const response = await fetch(`/api/auth/signin?redirect=${encodeURIComponent(redirect)}`, {
      method: "GET",
      headers: {
        Authorization: `Bearer ${idToken}`,
      },
    });

    // If the response is a redirect, follow the redirect
    if (response.redirected) {
      window.location.assign(response.url);
    }
  });
</script>
